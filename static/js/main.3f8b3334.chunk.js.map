{"version":3,"sources":["messaging.ts","Sender.tsx","Receiver.tsx","index.tsx","App.tsx"],"names":["create","sendMessage","receiveMessage","Sender","React","message","setMessage","inputRef","onSubmit","event","preventDefault","current","focus","className","ref","type","value","onChange","target","placeholder","disabled","length","Receiver","callback","messages","setMessages","map","index","key","ReactDOM","href","document","getElementById","window","console","log"],"mappings":"oQAGsCA,mB,mBAA/BC,E,KAAaC,E,iBCCL,SAASC,IAAU,IAAD,EACDC,WAAe,IADd,mBACxBC,EADwB,KACfC,EADe,KAEzBC,EAAWH,SAA+B,MAgBhD,OACE,wBAAMI,SAfR,SAAsBC,GACpBA,EAAMC,iBACNT,EAAYI,GACZC,EAAW,IAEPC,EAASI,SACXJ,EAASI,QAAQC,SASWC,UAAU,UACtC,4CAEA,2BACE,yBACEC,IAAKP,EACLQ,KAAK,OACLC,MAAOX,EACPY,SAbR,SAA2BR,GACzBH,EAAWG,EAAMS,OAAOF,QAalBG,YAAY,sBAGd,0BACEJ,KAAK,SACLK,SAA6B,IAAnBf,EAAQgB,QAFpB,U,iBC/BO,SAASC,IAAY,IFMDC,EENA,EACDnB,WAAyB,IADxB,mBAC1BoB,EAD0B,KAChBC,EADgB,KAOjC,OFDiCF,EEHd,SAAClB,GAClBoB,GAAY,SAACD,GAAD,4BAAkBA,GAAlB,CAA4BnB,QFG1CD,aAAgB,kBAAMF,EAAeqB,KAAW,CAACA,IEC/C,uBAAKV,UAAU,YACb,+CAECW,EAASH,OAAS,EAEf,0BACGG,EAASE,KAAI,SAACrB,EAASsB,GAAV,OACZ,sBAAIC,IAAKD,GACNtB,OAKP,sDCnBVwB,SAAgB,iBCDD,WACb,OACE,uBAAKhB,UAAU,OACb,8BACE,gDACA,qBAAGiB,KAAK,gEAAR,WAGF,4BACE,gBAAC,EAAD,MACA,gBAAC,EAAD,OAGF,wHAE2B,yDAF3B,uBDZU,MAASC,SAASC,eAAe,SAEhDC,OAAehC,YAAcA,EAE9BC,GAAe,SAACG,GACd6B,QAAQC,IAAI,oBAAqB9B,Q","file":"static/js/main.3f8b3334.chunk.js","sourcesContent":["import * as React from \"react\";\nimport { create } from \"pubs\";\n\nconst [sendMessage, receiveMessage] = create<string>();\n\nexport {\n  sendMessage,\n  receiveMessage,\n};\n\nexport function useReceivedMessage(callback: (message: string) => void) {\n  React.useEffect(() => receiveMessage(callback), [callback]);\n\n  // The above is semantically the same as writing it\n  // in a more verbose way:\n  /*\n   *   React.useEffect(\n   *     () => {\n   *       const unsubscribe = receiveMessage(callback);\n   *\n   *       return () => {\n   *         unsubscribe();\n   *       };\n   *     },\n   *     [callback]\n   *   );\n   */\n}\n","import * as React from \"react\";\nimport \"./Sender.css\";\nimport { sendMessage } from \"./messaging\";\n\nexport default function Sender() {\n  const [message, setMessage] = React.useState(\"\");\n  const inputRef = React.useRef<HTMLInputElement>(null);\n\n  function handleSubmit(event: React.FormEvent) {\n    event.preventDefault();\n    sendMessage(message);\n    setMessage(\"\");\n\n    if (inputRef.current) {\n      inputRef.current.focus();\n    }\n  }\n\n  function handleInputChange(event: React.ChangeEvent<HTMLInputElement>) {\n    setMessage(event.target.value);\n  }\n\n  return (\n    <form onSubmit={handleSubmit} className=\"Sender\">\n      <h2>Send a message</h2>\n\n      <div>\n        <input\n          ref={inputRef}\n          type=\"text\"\n          value={message}\n          onChange={handleInputChange}\n          placeholder=\"Type a message...\"\n        />\n\n        <button\n          type=\"submit\"\n          disabled={message.length === 0}\n        >\n          Send\n        </button>\n      </div>\n    </form>\n  );\n}\n","import * as React from \"react\";\nimport \"./Receiver.css\";\nimport { useReceivedMessage } from \"./messaging\";\n\nexport default function Receiver() {\n  const [messages, setMessages] = React.useState<string[]>([]);\n\n  useReceivedMessage((message) => {\n    setMessages((messages) => [...messages, message]);\n  });\n\n  return (\n    <div className=\"Receiver\">\n      <h2>Received messages</h2>\n\n      {messages.length > 0\n        ? (\n          <ol>\n            {messages.map((message, index) => (\n              <li key={index}>\n                {message}\n              </li>\n            ))}\n          </ol>\n        )\n        : <p>No message received yet.</p>\n      }\n    </div>\n  )\n}\n","import * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { receiveMessage, sendMessage } from \"./messaging\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n(window as any).sendMessage = sendMessage;\n\nreceiveMessage((message) => {\n  console.log(\"Message received:\", message);\n});\n","import * as React from \"react\";\nimport \"./App.css\";\nimport Sender from \"./Sender\";\nimport Receiver from \"./Receiver\";\n\nexport default function App() {\n  return (\n    <div className=\"App\">\n      <header>\n        <h1>Pubs Usage Example</h1>\n        <a href=\"https://github.com/martinandert/pubs/tree/master/example/src\">GitHub</a>\n      </header>\n\n      <main>\n        <Sender />\n        <Receiver />\n      </main>\n\n      <p>\n        All received messages get logged to the console, too. You can also\n        send messages by issuing <code>sendMessage(\"my message\")</code> in\n        the console.\n      </p>\n    </div>\n  );\n}\n"],"sourceRoot":""}